#!/bin/bash

###################################################
# input (enviromental variable):
# * OS_VER        -   ubuntu-14.04 or ubuntu-16.04
# * BUILD_TYPE    -   vmware or virtualbox
# * RACKHD_INSTALL_ANSIBLE - which is the ansible yml playbook used. now are rackhd_package or rackhd_local
###################################################




# early exit on command failure
set -e

#Ubuntu Version, can become an ENV VAR in the future
if  [ ! -n "${OS_VER}" ];  then
    OS_VER=ubuntu-14.04
fi
echo "Packer Build based on $OS_VER"

# Build Vagrant or VMware OVA
if  [ ! -n "${BUILD_TYPE}" ];  then
    BUILD_TYPE=vmware  # option is vmware or vitrualbox , case senstive
fi



# Enable Verbose Packer Logging
# see https://www.packer.io/docs/other/environmental-variables.html for details
export PACKER_LOG=1
export PACKER_LOG_PATH=./packer-debug.log
export PACKER_NO_COLOR=1  # for Jenkins usage. if manual run, suggest to turn color on (set to 0)


# By default. use ansible playbook : rackhd_package.yml
# can become an ENV VAR in the future
if  [ ! -n "${RACKHD_INSTALL_ANSIBLE}" ];  then
    RACKHD_INSTALL_ANSIBLE=rackhd_package
fi
echo "Install RackHD with ansible ${RACKHD_INSTALL_ANSIBLE}.yml"



# default is output-${type}. you can customized in packer's json by "output_directory" param
VMDIR=output-${BUILD_TYPE}-iso

VM_NAME=rackhd-${OS_VER}


# parameter file pass to packer
echo { \"playbook\": \"${RACKHD_INSTALL_ANSIBLE}\",   > template.cfg
echo  \"vm_name\": \"${VM_NAME}\" } >> template.cfg


PACKER=packer
if [ -x /opt/packer/packer ]
then
    PACKER=/opt/packer/packer
fi

if [ -x /usr/local/bin/ts ]
then
    TS=/usr/local/bin/ts
else
    TS=cat
fi


if [ "$BUILD_TYPE"  == "vmware" ];  then
    # Check Free Disk Space,  VMWare Workstation may stuck if disk space too small
    fd_in_kb=$(df  .  | awk '/^\/dev/ {print $4}')
    fd_thres=$(expr 1024 '*' 1024 '*' 8)  # set to 8G as threshold.
    if [ $fd_in_kb -lt  $fd_thres ]
    then
        echo "The Free Up Disk Space($fd_in_kb KB) is not suffcient(recommended to $fd_thres KB). it may cause VMWare Workstation to stuck."
        exit 2
    fi
fi

#build RackHD OVA
$PACKER build --force --only=${BUILD_TYPE}-iso --var-file=template.cfg template-${OS_VER}.json | $TS | tee packer-install.log

if [ $? != 0 ]; then
    echo "Packer Build failed.. exit"
    exit 3
fi

if [ "$BUILD_TYPE"  != "vmware" ];  then
    echo "Skip the signing for virtualbox for the time being ..."
    exit 0
fi


# Prepare Signing Key (used for Jenkins Build Release)
if [ -f "$CI_SIGNING_KEY" ]
then
    SIGN_ARGS="--privateKey=$CI_SIGNING_KEY"
    echo "Signing the OVA with the CI key"
else
    echo "No signing to be performed.. skip."
fi

# Conver the VM Disk and VMX folder into an OVA

BASENAME=${VM_NAME}
OVA="${BASENAME}.ova"
ovftool $SIGN_ARGS -o ${VMDIR}/${VM_NAME}.vmx $OVA

if [ $? != 0 ]; then
    echo "ovftool exec failed.. exit"
    exit 4
fi

# Do Virus Scan
if [ -x /usr/bin/clamscan ]
then
    echo "Doing ClamScan"
    rm -rf "$OVA.avscan"
    /usr/bin/clamscan --log="$OVA.avscan" --max-filesize=4000M --max-scansize=4000M -r ${VMDIR} --allmatch
else
    echo "skip clamscan..."
fi


#### BEGIN ###### Modify the OVF file and update checksum ##############
#
#Background:
#   for the purpose of RackHD deployment enviroment without DHCP on admin port (e.x.: eth0),
#   "OVF Environment" is leveraged to configure VM's IP during OVA/OVF deployment
#
#Implementation:
#   1. define customized fields in OVF template file(XML format)
#   2. when deploy RackHD OVA , you can specific the eth0 IP (thru OVF Env Parameter) like ```ovftool --prop:adminIP=1.2.3.4 .....```
#   3. in VM OS's bootup scripts: use VMWare Tool to retrieve IP and set the primary NIC(eth0 for example)
#
#  Reference: http://www.v-front.de/2014/01/building-self-configuring-nested-esxi.html
#
###################################################################
echo "covert to OVF"
OVF=$"${BASENAME}.ovf"
ovftool $OVA  $OVF
echo "modify the OVF"

#######################################################
# Note : this is ESXi format. (other ESX version may varies )
# Add ProductSection/Property xml nodes under VirtualSystem xml node( kind of declare OVF Enviromental Properties)
#######################################################

################
#[ OVF Template Injection Step #1 ]
# Below 'sed' will "insert" below XML tree at the end of <VirtualSystem> tag of the OVF template file.
#     |-ProductSection
#     |----Info
#     |----Product
#     |----Category
#     |----Property #1
#     |----Property #..
#     |----Property #n
#################
sed -i 's/<\/VirtualSystem>/ \
  <ProductSection>    \
     <Info>Information about the installed software<\/Info> \
     <Product>Rackhd<\/Product> \
     <Category>adminnetwork<\/Category>  \
     <Property ovf:key="adminIP" ovf:type="string" ovf:userConfigurable="true"> \
        <Label>adminIP<\/Label> \
     <\/Property> \
     <Property ovf:key="adminGateway" ovf:type="string" ovf:userConfigurable="true"> \
        <Label>adminGateway<\/Label> \
     <\/Property> \
     <Property ovf:key="adminNetmask" ovf:type="string" ovf:userConfigurable="true"> \
        <Label>adminNetmask<\/Label> \
     <\/Property> \
     <Property ovf:key="adminDNS" ovf:type="string" ovf:userConfigurable="true"> \
        <Label>adminDNS<\/Label> \
     <\/Property>  \
  <\/ProductSection> \
<\/VirtualSystem>   \
/'  $OVF
################
#[ OVF Template Injection Step #2 ]
# specific the "OVF enviroment transport" method to VMWare Tools
###############
sed -i 's/<VirtualHardwareSection>/<VirtualHardwareSection ovf:transport="com.vmware.guestInfo" > /' $OVF



echo "recovert back to OVA"
###############
#[ OVF Template Injection Step #3 ]
# update checksum
###############
NewChk=$(sha1sum $OVF | awk '{print $1}')
sed  -i -E  "s/SHA1\(.*ovf\)=.*$/SHA1\($OVF\)= $NewChk/g"  $"${BASENAME}.mf"
##############
#[ OVF Template Injection Step #4 ]
# re-package into OVA
##############
rm $OVA
ovftool $OVF $OVA
### END ####### Modify the OVF file and update checksum ##############



# Create MD5 & Sha256 checksum file

rm -f "$OVA.md5" "$OVA.sha"
md5sum "$OVA" > "$OVA.md5"
sha256sum  "$OVA" > "$OVA.sha"

echo "***************************"
echo "Created : $OVA"
echo "also find $OVA.md5 & $OVA.sha"
echo "***************************"


# Do gpg signing
if [ -f "$GPG_SIGNING_KEY" ]
then
    export GNUPGHOME=$(mktemp -d)
    trap -- "rm -rf $GNUPGHOME" EXIT
    gpg --allow-secret-key-import --import "$GPG_SIGNING_KEY"
    gpg -k

    rm -rf "$OVA.md5.gpg"
    gpg -a --output "$OVA.md5.gpg" --detach-sig "$OVA.md5"

    rm -rf "$OVA.sha.gpg"
    gpg -a --output "$OVA.sha.gpg" --detach-sig "$OVA.sha"

    if [ -f "$OVA.avscan" ]
    then
        gpg -a --output "$OVA.avscan.gpg" --detach-sig "$OVA.avscan"
    fi
fi

chmod a=r "$OVA"*


